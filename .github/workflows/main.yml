name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'          # e.g. "v0.1.1"
  pull_request:

permissions:
  contents: write
  packages: write
  actions: write
  issues: write
  pull-requests: write

jobs:
  ##############################################
  # 1) Run tests on every push (or PR) to main #
  ##############################################
  test:
    if: "!startsWith(github.event.head_commit.message, 'Bump version')"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r my_fastapi_app/requirements.txt
          pip install build

      - name: Run tests
        run: |
          cd my_fastapi_app
          pytest
        env:
          db_host: localhost
          db_port: 5432
          db_name: mydatabase
          db_user: myuser
          db_password: mypassword
          log_level: INFO

  ######################################################
  # 2) Build & Release only if the push is a Git tag   #
  ######################################################
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Parse version from tag
        id: get_version
        run: |
          RAW_TAG="${GITHUB_REF#refs/tags/}"   # e.g. "v0.1.2"
          VERSION="${RAW_TAG#v}"               # e.g. "0.1.2"

          echo "TAG is $RAW_TAG"
          echo "VERSION is $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          cd my_fastapi_app
          sed -i "s/^version = .*/version = \"${VERSION}\"/" pyproject.toml
          cd ..
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git checkout main
          git add my_fastapi_app/pyproject.toml
          git commit -m "Bump version to ${VERSION}"
          
          git pull --rebase
          git push origin main

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build Python package (wheel + sdist)
        run: |
          cd my_fastapi_app
          python -m build

      - name: Install RPM tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Create rpmbuild directory structure
        run: |
          mkdir -p rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS}

      - name: Prepare for RPM build
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          tar -czf rpmbuild/SOURCES/fastapi-app-${VERSION}.tar.gz my_fastapi_app
          cp my_fastapi_app/packaging/fastapi-app.spec rpmbuild/SPECS/

      - name: Build RPM package
        id: build_rpm
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          rpmbuild \
            --define "_topdir $(pwd)/rpmbuild" \
            --define "version ${VERSION}" \
            -bb --nodeps rpmbuild/SPECS/fastapi-app.spec

          # Store the built RPM path in an Actions output for the next step
          echo "RPM_PATH=$(find rpmbuild/RPMS -type f -name '*.rpm' | head -n1)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload RPM to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_rpm.outputs.RPM_PATH }}
          asset_name: fastapi-app-${{ steps.get_version.outputs.version }}.rpm
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
