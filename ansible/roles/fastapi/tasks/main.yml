# roles/fastapi/tasks/main.yml
---
# Common package installation regardless of installation method
- name: Install required packages
  become: true
  yum:
    name: 
      - python3
      - python3-pip
      - python3-devel
      - postgresql-devel
      - rsync
    state: present

# Package-based installation tasks
- name: Install from package
  when: install_method == "package"
  block:
    - name: Install RPM package
      become: true
      yum:
        name: "https://github.com/majnikool/test-app/releases/download/{{ package_version }}/fastapi-app-{{ package_version | replace('v', '') }}.rpm"
        state: present
        disable_gpg_check: yes

    # Ensure proper permissions for package installation
    - name: Ensure app directory exists with correct permissions
      become: true
      file:
        path: "{{ app_home }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
        recurse: yes

    # Setup virtualenv for package installation
    - name: Remove existing venv if exists for package
      become: true
      file:
        path: "{{ app_venv }}"
        state: absent

    - name: Create fresh virtual environment for package
      become: true
      become_user: "{{ app_user }}"
      command: python3 -m venv "{{ app_venv }}"

    - name: Install base packages in venv for package
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pip install --upgrade pip setuptools wheel"

    - name: Install requirements for package
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pip install -r {{ app_home }}/requirements.txt"
      args:
        chdir: "{{ app_home }}"

# Source-based installation tasks
- name: Install from source
  when: install_method == "source"
  block:
    - name: Install git
      become: true
      yum:
        name: git
        state: present

    - name: Check if existing directory is a Git repo
      stat:
        path: "{{ app_home }}/.git"
      register: gitcheck

    - name: Remove existing directory if not a Git repo
      file:
        path: "{{ app_home }}"
        state: absent
      when: gitcheck.stat.exists == false

    - name: Create application directory
      become: true
      file:
        path: "{{ app_home }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Clone application repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_home }}"
        version: "{{ git_version }}"
        force: yes

    - name: Install build dependencies
      become: true
      pip:
        name: 
          - wheel
          - setuptools
          - build
        state: present

    - name: Create fresh virtual environment
      become: true
      become_user: "{{ app_user }}"
      command: python3 -m venv "{{ app_venv }}"

    - name: Install base packages in venv
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pip install --upgrade pip setuptools wheel"

    - name: Install requirements from source directory
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pip install -r {{ app_home }}/my_fastapi_app/requirements.txt"
      args:
        chdir: "{{ app_home }}"

    - name: Ensure proper ownership for pip install
      become: true
      file:
        path: "{{ app_home }}/my_fastapi_app"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
        recurse: yes

    - name: Install the package in development mode
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pip install -e {{ app_home }}/my_fastapi_app"
      args:
        chdir: "{{ app_home }}"

# Wait for database
- name: Wait for PostgreSQL connection
  wait_for:
    host: "{{ hostvars['postgres']['ansible_host'] }}"
    port: "{{ db_port }}"
    timeout: 60
  delegate_to: "{{ groups['fastapi'][0] }}"

# Configure environment
- name: Create .env file
  become: true
  template:
    src: "env.j2"
    dest: "{{ app_home }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600'

# Setup service
- name: Deploy FastAPI systemd service
  become: true
  template:
    src: "fastapi.service.j2"
    dest: /etc/systemd/system/fastapi.service
    mode: '0644'

- name: Reload systemd daemon
  become: true
  systemd:
    daemon_reload: yes

- name: Start and enable FastAPI service
  become: true
  systemd:
    name: fastapi
    enabled: yes
    state: started

- name: Wait for FastAPI to be ready
  wait_for:
    host: "{{ ansible_host }}"
    port: "{{ app_port }}"
    timeout: 30

# Run tests
- name: Run tests for package installation
  when: install_method == "package"
  block:
    - name: Run pytest
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pytest -v tests/"
      args:
        chdir: "{{ app_home }}"
      environment:
        PATH: "{{ app_venv }}/bin:{{ ansible_env.PATH }}"
        PYTHONPATH: "{{ app_home }}"
        db_host: "{{ hostvars['postgres']['ansible_host'] }}"
        db_port: "{{ db_port }}"
        db_name: "{{ db_name }}"
        db_user: "{{ db_user }}"
        db_password: "{{ db_password }}"
        log_level: "{{ log_level }}"
      register: pytest_result
      ignore_errors: true

    - name: Show pytest results
      debug:
        var: pytest_result.stdout_lines

    - name: Fail if tests failed
      fail:
        msg: "Pytest failed with return code {{ pytest_result.rc }}"
      when: pytest_result.rc != 0

- name: Run tests for source installation
  when: install_method == "source"
  block:
    - name: Run pytest
      become: true
      become_user: "{{ app_user }}"
      command: "{{ app_venv }}/bin/pytest -v tests/"
      args:
        chdir: "{{ app_home }}/my_fastapi_app"
      environment:
        PATH: "{{ app_venv }}/bin:{{ ansible_env.PATH }}"
        PYTHONPATH: "{{ app_home }}/my_fastapi_app"
        db_host: "{{ hostvars['postgres']['ansible_host'] }}"
        db_port: "{{ db_port }}"
        db_name: "{{ db_name }}"
        db_user: "{{ db_user }}"
        db_password: "{{ db_password }}"
        log_level: "{{ log_level }}"
      register: pytest_result
      ignore_errors: true

    - name: Show pytest results
      debug:
        var: pytest_result.stdout_lines

    - name: Fail if tests failed
      fail:
        msg: "Pytest failed with return code {{ pytest_result.rc }}"
      when: pytest_result.rc != 0

- name: Check FastAPI service status
  become: true
  systemd:
    name: fastapi
    state: started
  register: service_status

- name: Show service status
  debug:
    var: service_status